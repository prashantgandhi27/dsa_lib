////////////////////////////////////////////////////////////////////////////////////////////////////
// Copyright (c) 2024 Prashant Gandhi - All rights are reserved
////////////////////////////////////////////////////////////////////////////////////////////////////
#ifndef PRASHANT_MILKYWAY_BINARY_SEARCH_TREE_bINARY_SEARCH_TREE_H
#define PRASHANT_MILKYWAY_BINARY_SEARCH_TREE_bINARY_SEARCH_TREE_H

////////////////////////////////////////////////////////////////////////////////////////////////////
// Include(s)
////////////////////////////////////////////////////////////////////////////////////////////////////
#include "milky_way/binary_search_tree/binary_tree_node.h"
#include "milky_way/types.h"

#include <cstdint>
#include <memory>
#include <type_traits>

////////////////////////////////////////////////////////////////////////////////////////////////////
// Namespace(s)
////////////////////////////////////////////////////////////////////////////////////////////////////
namespace Prashant
{
namespace Milkyway
{
namespace BinarySearchTree
{

////////////////////////////////////////////////////////////////////////////////////////////////////
// @brief Binary Search Tree class.
////////////////////////////////////////////////////////////////////////////////////////////////////
template <typename ElementType>
class BinarySearchTree
{
public:
   static_assert((std::is_integral<ElementType>::value || std::is_floating_point<ElementType>::value),
                  "BST element type should be either integral or floating point type.");

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Special member functions.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   BinarySearchTree(void);
   ~BinarySearchTree(void);

   BinarySearchTree(BinarySearchTree<ElementType> const&) = delete;
   BinarySearchTree<ElementType>& operator=(BinarySearchTree<ElementType> const&) = delete;

   BinarySearchTree(BinarySearchTree<ElementType>&&) noexcept = delete;
   BinarySearchTree<ElementType>& operator=(BinarySearchTree<ElementType>&&) noexcept = delete;

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Searches the element into tree.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   void traversal(Binary_search_tree_traversal_t const cTraversalAlgorithm) const;

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Inserts the element into tree.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   bool insertElement(ElementType const cValue);

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Removes the element into tree.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   bool removeElement(ElementType const cValue) const;

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Searches the element into tree.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   bool searchElement(ElementType const cValue) const;

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Returns height of the tree.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   uint32_t treeHeight(void) const;

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Returns total number of nodes in tree.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   uint32_t totalNodes(void) const;

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Returns total number of leaves in tree.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   uint32_t totalLeaves(void) const;

private:
   BinaryTreeNode<ElementType> *mRoot;

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Creates new node.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   BinaryTreeNode<ElementType>* createNode(ElementType const cValue) const;

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Inserts new node if provided element is not present.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   bool insertNode(BinaryTreeNode<ElementType>* &r_node, ElementType const cValue);

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Pre-order traversal algorithm.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   void preOrderTraversal(BinaryTreeNode<ElementType>* &r_node) const;

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief In-order traversal algorithm.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   void inOrderTraversal(BinaryTreeNode<ElementType>* &r_node) const;

   /////////////////////////////////////////////////////////////////////////////////////////////////
   // @brief Post-order traversal algorithm.
   /////////////////////////////////////////////////////////////////////////////////////////////////
   void postOrderTraversal(BinaryTreeNode<ElementType>* &r_node) const;
};

} // namespace BinarySearchTree
} // namespace Milkyway
} // namespace Prashant

#endif // PRASHANT_MILKYWAY_BINARY_SEARCH_TREE_bINARY_SEARCH_TREE_H
